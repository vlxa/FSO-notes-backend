{"version":3,"sources":["components/note.js","components/notification.js","services/notes.js","App.js","index.js"],"names":["Note","aNote","toggleImportance","label","important","className","style","color","content","onClick","Notification","message","opacity","length","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setMessage","useEffect","document","title","noteService","initialNotes","notesToShow","filter","note","map","find","n","changedNote","updatedNote","setTimeout","catch","error","console","log","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","createdNote","type","value","placeholder","onChange","target","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.edb8a3b4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Note = ({aNote, toggleImportance}) => {\n  const label = aNote.important ? 'make not important' : 'make important';\n  return (\n    <li className='note' style={{color: aNote.important ? 'black' : 'grey'}}>\n      {aNote.content}\n      <button onClick={toggleImportance}>{label}</button>{' '}\n    </li>\n  );\n};\n\nNote.propTypes = {\n  aNote: PropTypes.object.isRequired,\n  toggleImportance: PropTypes.func.isRequired,\n};\n\nexport default Note;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message}) => {\n  let opacity = 0;\n  if (message.length > 0) {\n    opacity = 1;\n  }\n  return (\n    <div\n      className='notification'\n      style={{\n        opacity: opacity,\n        color: message[1] === 'error' ? 'red ' : 'green',\n      }}\n    >\n      {message[0]}\n    </div>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.array,\n};\n\nexport default Notification;\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n}\n","import React, {useState, useEffect} from 'react';\n// Components\nimport Note from './components/note';\nimport Notification from './components/notification';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [message, setMessage] = useState([]);\n\n  useEffect(() => {\n    document.title = 'Notes';\n  }, []);\n\n  useEffect(() => {\n    noteService // force-break\n      .getAll()\n      .then((initialNotes) => {\n        setNotes(initialNotes);\n      });\n  }, []);\n\n  const handleNoteChange = (e) => {\n    e.preventDefault();\n    setNewNote(e.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  const submitNewNote = (e) => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService // force-break\n      .create(noteObject)\n      .then((createdNote) => {\n        setNotes([...notes, createdNote]);\n        setNewNote('');\n        setMessage([`Adeed \"${newNote}\"`, 'info']);\n        setTimeout(() => {\n          setMessage([]);\n        }, 2000);\n      });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = {...note, important: !note.important};\n\n    noteService // force-break\n      .update(id, changedNote)\n      .then((updatedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : updatedNote)));\n        setMessage([\n          `\"${note.content}\"is now ${\n            changedNote.important ? 'important' : 'not important'\n          }`,\n          'info',\n        ]);\n        setTimeout(() => {\n          setMessage([]);\n        }, 2000);\n      })\n      .catch((error) => {\n        setMessage([\n          `Note \"${note.content}\" was already removed from server`,\n          'error',\n        ]);\n        console.log(error);\n        setTimeout(() => {\n          setMessage([]);\n        }, 2000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={message} />\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            aNote={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={submitNewNote}>\n        <input\n          type='text'\n          value={newNote}\n          placeholder='New note...'\n          onChange={handleNoteChange}\n        />\n        <button type='submit'>submit</button>\n      </form>\n      <button onClick={() => setShowAll(!showAll)}>\n        Show {showAll ? 'important' : 'All'}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App.js';\n// Styles\nimport './index.css';\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false,\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true,\n  },\n];\n\nReactDOM.render(<App notes={notes} />, document.getElementById('root'));\n"],"sourceRoot":""}